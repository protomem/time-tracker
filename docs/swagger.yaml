definitions:
  main.requestAddUser:
    properties:
      passportNumber:
        type: string
    type: object
  main.requestUpdateUser:
    properties:
      address:
        type: string
      name:
        type: string
      passportNumber:
        type: integer
      passportSerie:
        type: integer
      patronymic:
        type: string
      surname:
        type: string
    type: object
  main.userFormatStat:
    properties:
      amountTime:
        type: string
      task:
        type: integer
    type: object
  model.Session:
    properties:
      begin:
        type: string
      createdAt:
        type: string
      end:
        type: string
      id:
        type: integer
      taskId:
        type: integer
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
  model.User:
    properties:
      address:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      passportSerie:
        type: integer
      passwortNumber:
        type: integer
      patronymic:
        type: string
      surname:
        type: string
      updatedAt:
        type: string
    type: object
  validator.Validator:
    properties:
      errors:
        items:
          type: string
        type: array
      fieldErrors:
        additionalProperties:
          type: string
        type: object
    type: object
info:
  contact: {}
paths:
  /sessions/{userId}:
    get:
      description: Get all user sessions
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Session'
            type: array
        "400":
          description: Bad request input
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Find Sessions
      tags:
      - sessions
  /sessions/{userId}/{taskId}:
    delete:
      description: Stop session
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request input
          schema:
            type: object
        "404":
          description: Session not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Stop Session
      tags:
      - sessions
    post:
      description: Start new session
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad request input
          schema:
            type: object
        "409":
          description: Session already exists
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Start Session
      tags:
      - sessions
  /status:
    get:
      consumes:
      - application/json
      description: Check if the server is up and running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Server Status
      tags:
      - api
  /users:
    get:
      description: Get all users by filters with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        minimum: 1
        name: pageSize
        type: integer
      - description: User name
        in: query
        name: name
        type: string
      - description: User surname
        in: query
        name: surname
        type: string
      - description: User patronymic
        in: query
        name: patronymic
        type: string
      - description: User address
        in: query
        name: address
        type: string
      - description: User passport serie
        in: query
        name: passportSerie
        type: integer
      - description: User passport number
        in: query
        name: passportNumber
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "400":
          description: Bad request
          schema:
            type: object
        "422":
          description: Invalid input data
          schema:
            $ref: '#/definitions/validator.Validator'
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Find Users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add new user
      parameters:
      - description: Passport serie and number
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.requestAddUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad request input
          schema:
            type: object
        "409":
          description: User already exists
          schema:
            type: object
        "422":
          description: Invalid input data
          schema:
            $ref: '#/definitions/validator.Validator'
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Add User
      tags:
      - users
  /users/{userId}:
    delete:
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request input
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Delete User
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: New user data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.requestUpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad request
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "409":
          description: User already exists
          schema:
            type: object
        "422":
          description: Invalid input data
          schema:
            $ref: '#/definitions/validator.Validator'
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Update user
      tags:
      - users
  /users/{userId}/stats:
    get:
      description: Get users statistics
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Start date
        in: query
        name: after
        type: string
      - description: End date
        in: query
        name: before
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.userFormatStat'
            type: array
        "400":
          description: Bad request input
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Users Statistics
      tags:
      - users
swagger: "2.0"
